%YAML 1.2
---
name: Swift3
file_extensions: [swift]
scope: source.swift

# TODO: parse the syntax of type params

variables:
  identifier: '[a-z_][A-Za-z_0-9]*'
  ident_path: '[a-z_][A-Za-z_0-9\.]*'
  class_name: '[A-Z][A-Za-z_0-9]*'
  class_path: '[A-Z][A-Za-z_0-9\.]*'

contexts:
  main:
    # import
    - match: '\b(import)\s+({{ident_path}})\b'
      captures:
        1: support.function
        2: entity.name.class

    - match: '\b(import)\s+({{class_path}})\b'
      captures:
        1: support.function
        2: entity.name.class

    # class definition
    - match: '\b(extension)\s*({{class_name}})\s*(:)\s*({{class_name}})'
      captures:
        1: keyword
        2: entity.name.class
        3: punctuation
        4: support.class

    - match: '\b(class|extension|protocol|struct|enum)\s*({{class_name}})\s*(:)\s*'
      captures:
        1: keyword
        2: entity.name.class
        3: punctuation
      push: typeDefinition

    - match: '\b(class|extension|protocol|struct|enum)\s+({{class_name}})'
      captures:
        1: keyword
        2: entity.name.class

    # keywords
    - match: \b(break|catch|continue|default|defer|do|else|for|guard|if|in|static|switch|throw|try|repeat|return|where|while)\b
      scope: keyword
    - match: \b(typealias|associatedtype)\b
      scope: keyword

    # self
    - match: \b(self)(\.)
      captures:
        1: keyword
        2: punctuation
      push: variableChain
    - match: \b(self)\b
      scope: keyword

    # storage
    - match: '([@])({{identifier}})\b'
      scope: storage.type
    - match: \b(public|internal|mutating|nonmutating|weak|lazy|convenience|override|required|final|inout)\b
      scope: storage.type
    - match: \b(private(\(set\)|\(get\))*)
      scope: storage.type

    # built in functions
    - match: \b(get|set|numericCast|anyGenerator|withExtendedLifetime|withVaList)\b
      scope: support.function
    - match: \b(abs|alignof|alignofValue|assert|assertionFailure|debugPrint|dump|fatalError|getVaList|isUniquelyReferenced|max|min|precondition|preconditionFailure|print|readLine|sizeof|sizeofValue|strideof|strideofValue|swap|transcode|unsafeAddressOf|unsafeBitCast|unsafeDowncast|unsafeUnwrap|withUnsafeMutablePointer|withUnsafeMutablePointers|withUnsafePointer|withUnsafePointers|zip)\s*\(
      captures:
        1: support.function
      push: functionCallParameters

    # variable/constant definition
    - match: '\b(var)\s+({{identifier}})\s*(:)\s*'
      captures:
        1: keyword
        2: variable
        3: punctuation
      push: typeDefinition
    - match: '\b(let)\s+({{identifier}})\s*(:)\s*'
      captures:
        1: keyword
        2: constant.other
        3: punctuation
      push: typeDefinition
    - match: '\b(var)\s+({{identifier}})'
      captures:
        1: keyword
        2: variable
    - match: '\b(let)\s+({{identifier}})'
      captures:
        1: keyword
        2: constant.other

    # function definition
    - match: \b(class)?\s(func)\s+([^\s\(]*)
      captures:
        1: keyword
        2: keyword
        3: entity.name.function
      push: funcDefinition
    - match: \b(subscript)
      scope: support.function
      push: funcDefinition
    - match: \s(init)(\?)
      captures:
        1: support.function
        2: keyword.operator
      push: funcDefinition
    - match: \s(init|deinit)\b
      scope: support.function
      push: funcDefinition

    # enum
    - match: '\b(case)\s+(\.*{{class_path}}*)'
      captures:
        1: keyword
        2: constant.other
    - match: '(\s|\||&|=)(\.{{class_path}}*)(\()'
      captures:
        1: punctuation
        2: constant.other
        3: punctuation
      push: parameter
    - match: '(\s|\||&|=)(\.{{class_path}}*)\b'
      scope: constant.other
    - match: '\b(case)\s+'
      captures:
        1: keyword

    # comments
    - match: (//+)
      push: lineComment
    - match: (/\*+)
      push: comment

    - include: strings

    # pseudo preprocessor
    - match: ^\s*(#)(if|else|endif)(.*)$
      scope: support.constant

    # class function calls
    - match: '\b(({{class_name}})(\.))({{identifier}})\s*\('
      captures:
        2: entity.name.class
        3: punctuation
        4: entity.name.function
      push: functionCallParameters

    - match: '\b(({{class_name}})(\.))({{class_name}})\s'
      captures:
        2: entity.name.class
        3: punctuation
        4: constant.other

    - match: '\b({{class_name}})(\.)({{identifier}})'
      captures:
        1: entity.name.class
        2: punctuation
        3: variable

    - match: '\b({{class_name}})(\.)'
      captures:
        1: entity.name.class
        2: punctuation

    - match: '\b({{class_name}})\s*\('
      captures:
        1: entity.name.class
      push: functionCallParameters

    # functions calls
    - match: '(\.)({{identifier}})\s*(\()'
      captures:
        1: punctuation
        2: entity.name.function
        3: punctuation
      push: functionCallParameters

    - match: '([a-zA-Z_][A-Za-z_0-9]*)\s*(\()'
      captures:
        1: entity.name.function
        2: punctuation
      push: functionCallParameters

    # get/set calls
    - match: '(\.)({{ident_path}})[\b|\s]'
      captures:
        1: punctuation
        2: variable

    # hex numbers
    - match: \b(0x[0-9a-fA-F]+)
      scope: constant.numeric

    # negative numbers
    - match: \b(-[0-9]+)
      scope: constant.numeric
      push: number

    # positive numbers
    - match: \b([0-9]+)
      scope: constant.numeric
      push: number

    # constants and operators
    - include: constants
    - include: operators

    # everything else is probably just a variable
    - match: '\b({{identifier}})\b'
      scope: variable


  # operators
  operators:
    - match: '\$[0-9]+'
      scope: variable.parameter
    - match: '[-+=<>^$#!~*\\|&?\/]*'
      scope: keyword.operator

    # ranges
    - match: (\.\.\.)
      scope: keyword.operator
    - match: (\.\.<)
      scope: keyword.operator

  constants:
    - match: \b(true|false|nil)\b
      scope: constant.language

  # strings
  strings:
    - match: '"'
      push: string

  string:
    - meta_scope: string.quoted.double
    - match: '\\\('
      scope: punctuation.embedded
      set: stringInterpolation
    - match: \\.
      scope: constant.character.escape
    - match: '"'
      pop: true

  stringInterpolation:
    - include: main
    - match: '\)'
      scope: punctuation.embedded
      set: string

  # numbers 
  number:
    - match: ([0-9]*)(\.[0-9]+)?([eE][-]?[0-9]*(\.[0-9]+)?)
      scope: constant.numeric
    - match: ''
      pop: true

  # function definitions
  funcDefinition:
    - match: (\()
      scope: punctuation
      push: functionParameterDefinition
    - match: (\<)
      push: typeParameters
    - match: (:)
      scope: punctuation
      push: typeDefinition
    - match: \b(throws)\b
      scope: keyword
    - match: \s(->)\s*
      scope: keyword
      push: typeDefinition 
    - match: (\{|\n)
      pop: true

  functionParameterDefinition:
    - match: (\))
      scope: punctuation
      pop: true
    # with parameter name
    - match: '\b({{identifier}})(\s+{{identifier}})(:)\s*'
      captures:
        1: variable.parameter
        2: variable.parameter
        3: punctuation
      push: typeDefinition
    # without parameter name
    - match: '\b({{identifier}})(:)\s*'
      captures:
        1: variable.parameter
        3: punctuation
      push: typeDefinition
    - include: constants
    - include: operators

  # type definitions
  sharedTypeDefinition:
    - match: (\[)
      scope: punctuation
      push: arrayOrDict
    - match: (\()
      scope: punctuation
      push: tuple
    # - match: '\b({{ident_path}})(\<)''
    #   captures:
    #     1: support.class
    #     2: punctuation
    #   push: typeParameters
    - match: '\b({{class_path}})*'
      scope: support.class

  typeDefinition:
    - include: sharedTypeDefinition
    - match: ''
      pop: true

  arrayOrDict:
    - match: (\])
      scope: punctuation
      pop: true
    - include: sharedTypeDefinition

  tuple:
    - match: (\))
      scope: punctuation
      pop: true
    - include: sharedTypeDefinition

  typeParameters:
    - meta_content_scope: storage
    - match: \b(where)\b
      scope: keyword
    - match: (>)
      scope: punctuation
      pop: true

  parameter:
    - match: (\))
      pop: true

  # function calls
  funcCallParenTracker:
    - include: main
    - match: (\()
      push: funcCallParen
    - match: (\[)
      push: funcCallBracket
    - match: (\{)
      push: funcCallBrace

  functionCallParameters:
    - match: '({{identifier}})(:)'
      captures:
        1: variable.parameter
        2: punctuation
    - include: funcCallParenTracker
    - match: (\))
      pop: true

  funcCallParen:
    - include: funcCallParenTracker
    - match: (\))
      pop: true

  funcCallBracket:
    - include: funcCallParenTracker
    - match: (\])
      pop: true

  funcCallBrace:
    - include: funcCallParenTracker
    - match: (\})
      pop: true

  # chain of variables
  variableChain:
    - match: '({{identifier}})\s*(\()'
      captures:
        1: entity.name.function
        2: punctuation
      push: functionCallParameters
    - match: (\.)
      scope: punctuation
    - match: '({{identifier}})'
      scope: variable
    - match: ''
      pop: true

  # comments
  comment:
    - meta_scope: comment
    - match: (/\*)
      scope: comment
      push: comment
    - match: (\*/)
      scope: comment
      pop: true
    - match: \b(TODO|FIXME|HACK|BUG)\b
      scope: comment.todo

  lineComment:
    - meta_scope: comment.line
    - match: \n
      pop: true
    - match: \b(TODO|FIXME|HACK|BUG)\b
      scope: comment.todo
